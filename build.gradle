/*
 * Copyright (C) 2019-2021 German Vekhorev (DarksideCode)
 *
 * This file is part of Keiko Plugin Inspector.
 *
 * Keiko Plugin Inspector is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Keiko Plugin Inspector is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Keiko Plugin Inspector.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group 'me.darksidecode.keiko'
version '4.0.0-dev'
def buildTimestamp = new Date().format('yyyy/MM/dd_HH-mm-ss')

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

// Include resources
processResources {
    expand project.properties
}

// Fill build.properties
task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/build.properties").withWriter { w ->
            Properties p = new Properties()

            p['version'] = project.version.toString()
            p['timestamp'] = buildTimestamp.toString()

            p.store w, null
        }
    }
}

classes.dependsOn createProperties

// Relocate all our internal libraries to avoid linkage errors when proxying other executables at runtime.
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = 'keiko_internals'
}

// Include MANIFEST.MF
shadowJar {
    manifest {
        attributes 'Main-Class': 'me.darksidecode.keiko.proxy.Keiko'
    }
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar
tasks.shadowJar.finalizedBy tasks.test

// Dependencies
repositories {
    mavenCentral()

    maven {
        name 'Public Reflex Repository'
        url 'https://archiva.reflex.rip/repository/public/'
    }

    maven {
        name 'BungeeCord'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    maven {
        name 'Spigot'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
}

def asmVersion = '9.1'
def lombokVersion = '1.18.6'
def junit5Version = '5.7.1'

dependencies {
    // Embed in JAR (required)
    implementation group: 'me.darksidecode.kantanj', name: 'kantanj', version: '1.1.0'
    implementation group: 'me.darksidecode.jminima', name: 'jminima', version: '1.2.0'
    implementation group: 'org.ow2.asm', name: 'asm', version: "${asmVersion}"
    implementation group: 'org.ow2.asm', name: 'asm-util', version: "${asmVersion}"
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.10'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.28'

    // Present at runtime (optional)
    compileOnly group: 'org.spigotmc', name: 'spigot-api', version: '1.13.2-R0.1-SNAPSHOT'
    compileOnly group: 'net.md-5', name: 'bungeecord-api', version: '1.13-SNAPSHOT'

    // Annotation processors
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

    // Testing
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "${junit5Version}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junit5Version}"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junit5Version}"
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}
