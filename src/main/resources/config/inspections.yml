#### Keiko: Inspections Configuration #############################################
#
#   Welcome here!
#
#   This file lets you configure, as its name supposes, Keiko's inspections
# (analyses). In particular, it lets you configure so-called "static" analyses -
# the ones that run at server's early boot (startup) and check plugins before
# they actually load.
#
#   Useful stuff:
#
#     1. Keiko Wiki (a lot of useful information):
#        --> https://github.com/MeGysssTaa/keiko-plugin-inspector/wiki
#
#     2. Keiko Discord (for questions, discussion, and live support):
#        --> https://discord.gg/QWHzCXX
#
###################################################################################




# Plugins integrity check configuration.
#
# Some malicious plugins that can't bypass Keiko themselves may exploit Keiko's
# exclusions system (especially when it comes to Domain Access Control) and inject
# their malware in plugins that you trust by modifying their code silently. For
# example, if you allow plugin 'ProtocolLib' to delete all files on your machine,
# other plugins may modify its JAR and insert their malicious code in it, that will,
# for example, delete your whole server on behalf of 'ProtocolLib'.
#
# Keiko provides a solution for this: it can compare the actual SHA-256 checksums of
# various specific plugins with the checksums that you listed below, and warn you
# and disable the server forcefully in case of mismatch. This is especially useful
# for servers who only use a few public plugins that update quite rarely.
#
# Learn more:
# --> https://github.com/MeGysssTaa/keiko-plugin-inspector/wiki/Plugins-Integrity-Check
plugins_integrity:

  # Should Keiko shut the server down forcefully if it finds a mismatch in actual
  # and expected SHA-256 checksums in one of the plugins specified in the list below?
  #
  # (!) RECOMMENDED, because this will not allow malware to run in most cases.
  abort_server_startup: true

  # Map of plugin names to the SHA-256 checksums that they must have.
  # You can obtain plugins' checksums using keiko-tools (see Wiki for details).
  # If a plugin is not in this list, Keiko will not check its integrity.
  expected_checksums:
    SamplePlugin1: 0123456789abcdef
    SamplePlugin2: AA223344556677FF




# Static inspections configuration.
#
# Static inspections are inspections that always run at server's early boot stage
# and analyse bytecode (signature check) of all plugins before letting them run,
# thus detecting potential threats even before a malicious plugin is ran.
#
# TIP: you can use placeholder {plugins_folder} in all exclusions. Example:
#      - {plugins_folder}/ProtocolLib.jar
static:

  # Keiko caches static analyses' results in order to save time at startup.
  # Caches are stored based on hash (checksum) of the contents of analyzed files,
  # and are stored permanently. To help you bear with extensive disk usage, Keiko
  # will automatically delete all caches that exist for more then this number of
  # days (automatic space free).
  caches_lifespan_days: 14

  # Pirated copies of premium plugins are often malicious. By using a cracked plugin,
  # you are putting your server under the risk of being accessed or destroyed externally.
  # Usage of pirated plugins is one of the most common reason of servers' databases and
  # whole builds (maps, custom gamemodes, etc.) being leaked. By using genuine software
  # you support the original developers, help them maintain the product, get the ability
  # to report bugs, request help, and receive regular updates, and, most importantly, you
  # keep your server safe - paid plugins are often analyzed by the marketplace staff.
  # This inspection detects illegal, unlicensed software downloaded from DirectLeaks.
  direct_leaks:
    enabled: true
    countermeasures:
      malicious: always abort
    exclusions: []

  # ForceOP is usually referred to as code that gives specific player or a group of
  # players server operator (OP) permissions using Player#setOp or Bukkit commands ("/op").
  force_op:
    enabled: true
    countermeasures:
      malicious: always abort
    exclusions: []

  # "Natives" are extra files with code written in languages other than Java (e.g. C, C++)
  # that allow Java software to perform something out of JVM. This is very rarely used by
  # plugins, but may be abused by hackers to bypass Keiko Domain Access Control restrictions.
  #
  # (-*-) Keiko is capable of blocking NativesLoader at runtime using Domain Access Control.
  natives_loader:
    enabled: true
    countermeasures:
      malicious: always abort
    exclusions: []

  # Plugins should not shutdown your server normally. And even if they do, they must use the appropriate
  # Bukkit#shutdown() method for that since System.exit/Runtime.getRuntime().exit do not let the server
  # to finish its workflow properly, thus leading to unexpected issues/bugs such as server not responding
  # to commands (including Ctrl+C) and not performing world save.
  #
  # (-*-) Keiko is capable of blocking SystemExit at runtime using Domain Access Control.
  system_exit:
    enabled: true
    exclusions: []

  # There are many malicious plugins out there that can harm your server by executing
  # certain system (Linux/Windows) commands like in SSH (e.g. 'rm -rf /' that deletes
  # everything on your machine). Ordinary plugins should never use such Java capabilities.
  #
  # (-*-) Keiko is PARTIALLY(!) capable of blocking SystemProcess at runtime using Domain Access Control.
  #       There are still cases when DAC is unable of preventing ProcessBuilder usage, so it is strongly
  #       recommended that you let Keiko shut your server down forcefully if it detects a suspicious plugin
  #       that can harm your server using "SSH-like" system commands.
  system_process:
    enabled: true
    exclusions: []

  # Some of the most aggressive trojans often modify compiled code (bytecode) in other,
  # already installed and/or running plugins at runtime, and inject own, malicious, code
  # in them, or even in your server core. This way an attacker can keep the trojan running
  # on your machine even after you delete the initial infected plugin. Keiko attempts to
  # detect suspicious use of Java runtime class loading and bytecode instrumentation mechanisms.
  code_injection:
    enabled: true
    countermeasures:
      malicious: always abort
    exclusions: []
