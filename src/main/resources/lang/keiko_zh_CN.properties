############################################################################################################
#
#    Locale name: Simplified Chinese (China)
#
#    Authors (translators):
#
#        - ahdg6 (ahdg)
#          https://github.com/ahdg6/
#
############################################################################################################
logsCleaner.deleteSuccess=自动删除旧的日志文件 {0}
logsCleaner.dateErr=未能检索日志文件 {0} 的上次修改日期/时间
startup.classLoaderStats=已加载 \
'{0} = 0 : 无 | * : {0}' \
'{0} = 1 : 个类 | * : 多个类' \
(\
'{1} = 0 : 无 | * : {1}' \
'{1} = 1 : 个错误 | * : 多个错误'\
).
startup.jarErr.cantRead=无法读取指定的 JAR-文件包（没有权限？）。
startup.jarErr.isDir=指定的 JAR-文件包 是一个目录。
startup.jarErr.notExists=指定的jar文件不存在。
startup.launchingProxy=正在启动 Keiko 代理，请稍候...
startup.noArgsErr.line1=请指定 Keiko 要代理的 JAR文件 ，或者 Keiko 工具名。
startup.noArgsErr.line2 = 有关详细信息，请参阅安装说明:
startup.noArgsErr.line3=https://github.com/MeGysssTaa/keiko-plugin-inspector/wiki/Installation-Instructions
startup.proxyBegin=正在尝试代理 {0}
logsCleaner.deleteErr=删除旧日志文件 {0} 失败
pluginsIndex.beginning=正在索引插件，请稍等...
pluginsIndex.invalidPluginYml=在插件 {0} 中有无效的 plugin.yml 
pluginsIndex.indexedInfo=已检索到 {0} (在文件 {1}): {2} \
'{2} = 1 : 个类 | * : 多个类'
pluginsIndex.indexErr=跳过文件 {0}。您确定那是一个有效的插件吗?
pluginsIndex.numPluginsIndexed=已检索到 {0} 个插件\
'{0} = 1 : 个插件 | * : 多个插件'
startup.workDir=Keiko 工作目录: {0}
staticInspections.err=一个 \
'{0} = 1 : 个致命错误 | * : 个非致命错误' \
在探测插件 {1} 时遇到了错误 (于文件 {2})
staticInspections.desc.Static.ForceOp=|        插件 {0} (于文件 {1}) 能够给服务器上的某些玩家管理员 \
状态，从而赋予它们所有权限，让它们在没有 \
授权的情况下无视任何限制。如果这个插件不是权限系统插件，那么它 \
很可能这是一个特洛伊木马，使您的服务器更容易受到无端的黑客攻击。
staticInspections.clean=|    安全。
staticInspections.suspicious=|    检测到可疑代码。
staticInspections.malicious=|    检测到病毒代码。
staticInspections.analysisName=|    扫描类别: {0}
staticInspections.details=|        详情:
pluginsIndex.abortingLine1=中止启动: 插件索引过程中检测到致命错误
pluginsIndex.abortingLine2=更详细的解释可以在上面找到。
staticInspections.abortingLine1=中止启动：检测到至少一个恶意插件，或一个扫描失败的插件。
staticInspections.abortingLine2=更详细的解释可以在上面找到。
startup.proxyErr=运行 Keiko 代理失败。
staticInspections.beginAll=扫描插件中，请稍作等待...
staticInspections.desc.Static.SystemExit=|        插件 {0} (于文件 {1}) 正在使用不安全的程序终止代码，这可能导致意外的 \
问题。例如，在这种情况下，服务器可能无法保存其当前世界状态。 \
关闭服务器 -- 它只会崩溃。插件通常不应该关闭您的服务器。而且即使需要那么做， \
他们应该使用 Bukkit/Bungee库(API) 中构建的方法。
staticInspections.desc.Static.SystemProcess=|        插件 {0} (于文件 {1}) 可以使用系统命令。也就是说，这个插件理论上 \
能在您的系统上做任何事情，这当然包括绕过任何 Keiko 限制。大多数情况下， \
插件不需要使用系统命令，因为有一个更安全的Java API \
以供解决几乎所有的问题。这意味着这个插件很有可能会危害您的服务器。
staticInspections.desc.Static.NativesLoader=|        插件 {0} (于文件 {1}) 链接一些可疑的本机代码。这意味着插件不是 \
完全用 Java 编写，因此不能完全控制。换句话说， \
这个插件可以执行 Keiko 不会分析的潜在恶意代码。
staticInspections.desc.Static.DirectLeaks=|        插件 {0} (于文件 {1}) 是付费插件的盗版。 \
要声明的是，这个插件很可能被植入了恶意代码，其次这个插件 \
可能并不是最新的，可能包含各种安全漏洞和程序漏洞。 \
使用盗版插件会使你的服务器处于危险之中，而购买正版插件 \
能帮助插件作者可持续开发，且您也能得到更合格的更新与支持。
staticInspections.desc.Static.CodeInjection=|        插件 {0} (于文件 {1}) 似乎在操纵自己的代码，或者其他 \
在服务器上的插件代码，在运行时。它可能会注入恶意指令 \
到您所信赖的插件当中，或者感染你的整个服务器。使用这个插件非常 \
危险。
staticInspections.desc.Static.PermissionsPluginsAbuse=|        插件 {0} (于文件 {1}) 与权限插件显式交互。它可以修改权限 \
和服务器上任何玩家的组。通常，插件甚至不需要知道 \
您正在使用的权限插件，因为Bukkit/Bungee为 \
检查权限和组提供了相应的API。所以这个插件有潜在的破坏性。
staticInspections.caches.err=Keiko 静态检查缓存系统出了问题。
staticInspections.caches.resultCached=针对插件 {1} 的检查结果已被缓存到 {0}  (于文件 {2}) (\
'{3} = 0 : 无 | * : {3}' \
'{3} = 1 : 结果 | * : 个结果'\
)
staticInspections.caches.resultNotCached=丢失了针对插件 {1} 的检查结果 {0}(于文件 {2})
staticInspections.caches.analysisStats=完成了针对插件 {1} 的 {0} 多个静态扫描 (于文件 {2}) ({3} 个已缓存)
staticInspections.timeElapsed=在 {0} 秒内完成静态分析阶段。
staticInspections.vulnerable=|    检测到 不安全/易受攻击 的代码。
staticInspections.finishSummary=检测完成 \
共计, \
'{0} = 0 : 无 | * : {0}' \
'{0} = 1 : 个警告 | * : 多个警告' \
其中有 {1} \
'{1} = 1 : 个是 | * : 多个是' \
危险的
staticInspections.pluginSummary=|--- 这里 \
'{0} = 1 : 有 | * : 有' \
'{0} = 0 : 无 | * : {0}' \
'{0} = 1 : 个警告 | * : 多个警告' \
和插件 {2} 有关(于文件 {3} 中), \
其中有 {1} \
'{1} = 1 : 个是 | * : 多个是' \
危险的
staticInspections.pluginResults=|--- 插件 {0}（在文件 {1} 中）的静态分析结果：
logLevel.debug=调试
logLevel.info=信息
logLevel.warning=警告
logLevel.error=错误
identityFilter.err.skippingInvalidExclusion=正在忽略无效的排除项
identityFilter.err.invalidSyntax=格式错误
identityFilter.err.invalidFilterType=不支持的筛选类型
staticInspections.proceedAnywayPrompt=检测到警告！是否继续？
prompts.yes=是
prompts.no=否
integrityChecker.abortingLine1=中止启动：某些插件的完整性被侵犯。
integrityChecker.abortingLine2=更详细的解释可以在上面找到。
integrityChecker.updated=已保存插件 {0} 的文件校验值: {1}
integrityChecker.updatePrompt=|--- 忽略此警告并记住此插件的新校验和？
integrityChecker.violationPlugin=|--- 插件 {0} 的代码自上次启动以来被更改。您更新了它吗?
integrityChecker.violationCached=|    已保存的校验和: {0}
integrityChecker.violationActual=|    检测到的校验和: {0}
runtimeProtect.dac.enabled=成功激活 Keiko 域名访问控制 (DAC)。
runtimeProtect.dac.invalidDefCfg=在操作 {0} 中检测到无效默认 DAC 配置: "{1}". \
回调到 允许 规则。
runtimeProtect.dac.ignoringContraRule=在操作 {0} 中忽略了矛盾的 DAC 规则 : "{1}". \
此操作的默认规则是相同类型的。
runtimeProtect.dac.ignoringInvalidRule=在操作 {0} 中忽略了无效的 DAC 规则: "{1}". \
Syntax error? Details: "{2} ({3})"
runtimeProtect.dac.hostPort=主机: "{0}", 端口: {1}
runtimeProtect.dac.file=文件: "{0}"
runtimeProtect.dac.nativeLib=库: "{0}", 所在路径: "{1}"
runtimeProtect.dac.cmd=命令: "{0}"
runtimeProtect.dac.statusCode=状态码: {0}
runtimeProtect.dac.action=行为类型: {0}
runtimeProtect.dac.prop=所属属性: "{0}"
runtimeProtect.dac.vioDetected=Keiko DAC 阻止了安全风险 ({1})。详情: {0}: {2}
runtimeProtect.dac.actionDebug=Keiko DAC 注册了一个 {1} 回调。来源: {0}: {2}
runtimeProtect.dac.pkg=包 (发出请求的代码位置): "{0}"
runtimeProtect.dac.op.connection_open=连接打开
runtimeProtect.dac.op.connection_listen=在端口监听连接
runtimeProtect.dac.op.connection_accept=在端口接收数据
runtimeProtect.dac.op.connection_multicast=使用多拨
runtimeProtect.dac.op.socket_factory_set=更改socket(代理)设置
runtimeProtect.dac.op.file_read=读文件
runtimeProtect.dac.op.file_write=写文件
runtimeProtect.dac.op.file_delete=删文件
runtimeProtect.dac.op.natives_linkage=链接额外的本机库
runtimeProtect.dac.op.command_execution=执行系统命令
runtimeProtect.dac.op.system_exit=中止程序运行
runtimeProtect.dac.op.properties_access=一次性访问系统所有属性
runtimeProtect.dac.op.property_write=更改了一个系统属性
runtimeProtect.dac.op.property_read=读取系统属性
runtimeProtect.dac.op.package_access=使用 Java 包
runtimeProtect.dac.op.miscellaneous=混淆
updater.checkErr=检查更新失败。请确保 \
你的网络链接一切正常。
updater.updFound=有一份可用的 Keiko 更新待验收: {0}
updater.downloading=正在下载 Keiko v{0}, 请等待...
updater.errDownload=在下载或更新 Keiko 更新过程中失败
updater.checking=正在检查可用刚更新...
updater.installedLine1=已成功自动安装新版本 Keiko! 
updater.installedLine2=重启以应用更新。
updater.aborting=中止启动: 安装了新版本的 Keiko ，请重新运行程式。
startup.ambiguousInstallation=模棱两可的安装！看起来你有多个 \
Keiko JAR 文件安装在同目录。这可能会冲突。 \
强烈建议在更新后删除或移动旧的Keiko可执行文件 \
正在运行的文件: {0}, 检测到的另一个文件: {1} 
tool.notFound=没有如此名称的 Keiko 工具。查看Wiki获取更多: \
https://github.com/MeGysssTaa/keiko-plugin-inspector/wiki/Keiko-Tools
tool.err=发生了一个内部错误。
tool.clean.usage=clean
tool.clean.success=已删除 \
'{0} = 0 : 无 | * : {0}' \
'{0} = 1 : 个构件 | * : 多个构件' \
({1} 个字节)。 \
Errors: {2}
runtimeProtect.dac.op.minecraft_op_add=玩家获取op
runtimeProtect.dac.op.minecraft_op_remove=玩家被剥夺op
runtimeProtect.dac.op.minecraft_command_dispatch=Minecraft或插件命令调度
runtimeProtect.dac.player=玩家: "{0}"
runtimeProtect.megane.enabled=成功激活启发式后台威胁防御（Keiko Megane）。
runtimeProtect.megane.remedSuccess=Keiko Megane 成功地补救了威胁。你的服务器很安全。
runtimeProtect.megane.remedFailure=Keiko Megane 未能补救威胁。您的服务器可能有危险！
runtimeProtect.megane.heur.force_op.remedSuccessDetails=玩家 {0} 被 Keiko 剥夺了op权限。
runtimeProtect.megane.heur.force_op.onJoin=插件 {1} 于玩家 {0} 加入时给上了op (来源: {2}#{3}).
runtimeProtect.megane.heur.force_op.onChat=插件 {1} 于玩家 {0} 发送消息后给上了op (来源: {2}#{3}).
runtimeProtect.megane.heur.force_op.onCmdPrep=插件 {1} 于玩家 {0} 输入了聊天指令后上了op (来源: {2}#{3}).
runtimeProtect.megane.heur.force_op.bukkitApi=插件使用了 Bukkit API (内置方法) 来这样。
runtimeProtect.megane.heur.force_op.opCmd=插件在控制到使用了命令 "/op" 来这样。
runtimeProtect.megane.threatDetected=--- 已检测线程: {0}
runtimeProtect.megane.heur.book_backdoor.details=玩家 {0} 创建了带有 "cmd" 的书。 \
在某些情况下，本书可能被用来攻击您的服务器。
updater.installedLine3=若要了解有关此版本中更改的更多信息，请访问:
updater.installedLine4=https://github.com/MeGysssTaa/keiko-plugin-inspector/releases
updater.installedLine5=或加入 Keiko 的 Discord 服务器: https://discord.gg/QWHzCXX
startup.notRelease=您正在运行 Keiko 的不稳定构件类型 "{0}"。 \
这个版本没有经过正确的测试，可能包含严重的bug。 \
这样的版本不是为在生产中使用而设计的。 \
无论如何都要继续吗?
tool.code.usage=code <JAR-file的文件路径>
tool.code.notFile=指定的文件不存在或为目录: "{0}"
tool.code.wait=正在拆解，请稍候...
tool.code.err=在执行过程中检测到一个或多个非致命错误（进程将继续）:
tool.code.errFatal=在执行过程中检测到一个或多个致命错误（进程将退出）:
tool.code.outExists=输出目录已经存在（删除或移动它到某个地方）: "{0}"
tool.code.outMkFail=创建输出目录失败: "{0}"
tool.code.saveErr=保存文件 "{0}" 失败。错误: "{1}"
tool.code.complete=大功告成! 您可以于文件夹 "{0}" 搜寻输出代码
tool.wrongUsage=您错误地使用了这个工具。 \
参阅 Keiko Wiki 来获取更多详细知识。 \
Syntax:
logLevel.user_input_request=问题
runtimeProtect.dac.class=类名: "{0}"
runtimeProtect.dac.op.class_access=使用 Java 类
staticInspections.desc.Static.KeikoHook=|        插件 {0} (于文件 {1}) 正在尝试挂钩 Keiko 的内部代码。 \
Keiko 没有允许插件使用的公共API。这意味着 \
那个插件很可能是病毒, 并尝试骇入 Keiko  \
以实现规避检查的目的。
